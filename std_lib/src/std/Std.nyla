import std.IOStream;
import std.Bits;

/*
 * Found under minwindef.h is the
 * struct _FILETIME. This is an
 * implementation of that struct
 */
private module Win32FileTime {
    int dwLowDateTime;
    int dwHighDateTime;
}


module Std {

	private static external int* GetStdHandle(int nStdHandle);

	  // Win32 function for putting threads to sleep
	private static external void Sleep(int dwMilliseconds);
	  
	private static external bool QueryPerformanceFrequency(long* lpFrequency);
	private static external bool QueryPerformanceCounter(long* lpPerformanceCount);

	  // Win32 function that returns the time as UTC format
	private static external void GetSystemTimeAsFileTime(Win32FileTime* lpSystemTimeAsFileTime);


	private static const int* STD_OUT_HANDLE = GetStdHandle(-11);
	private static const int* STD_IN_HANDLE  = GetStdHandle(-10);
	private static const int* STD_ERR_HANDLE = GetStdHandle(-12);

	static IOStream out = var IOStream(STD_OUT_HANDLE);
	static IOStream err = var IOStream(STD_ERR_HANDLE);

	/*
	 * Puts the current thread to sleep for
	 * the number of milliseconds specified
	 */
	static void threadSleep(int timeInMilliseconds) {
		Sleep(timeInMilliseconds);
	}
	

	static long sysPerformanceFrequency;

	/*
	 * Initializes certain values that need to be
	 * cached at program startup to allow subsequent
	 * Win32 calls to work properly
	 */
	@StartUp
	static void initializeWin32() {
		QueryPerformanceFrequency(&sysPerformanceFrequency);
	}

	/*
	 * Gets the current time in nanoseconds
	 */
	static long currentNanoTime() {
		long current;
		QueryPerformanceCounter(&current);
		return cast(long) (current / cast(double)sysPerformanceFrequency) * 1000000000;
	}

	/*
	 * Gets the current time in milliseconds since
	 * January 1, 1601.
	 */
	static long currentMilliTime() {
		Win32FileTime fileTime = var Win32FileTime();
		GetSystemTimeAsFileTime(&fileTime);
		return Bits.joinInts(fileTime.dwLowDateTime, fileTime.dwHighDateTime) / 10000;
	}
}